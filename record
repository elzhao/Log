



压缩：
https://github.com/jiangxh1992/XHLZMA
Types.h


system/core/logd




#include <iostream>
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/stat.h>

int main()
{
  // 打开文件
  int fd = open("test.txt", O_RDONLY);
  if (fd == -1) {
    std::cerr << "Error opening file" << std::endl;
    return 1;
  }

  // 获取文件大小
  struct stat sb;
  if (fstat(fd, &sb) == -1) {
    std::cerr << "Error getting file size" << std::endl;
    return 1;
  }

  // 映射文件到内存
  void *ptr = mmap(nullptr, sb.st_size, PROT_READ, MAP_PRIVATE, fd, 0);
  if (ptr == MAP_FAILED) {
    std::cerr << "Error mapping file to memory" << std::endl;
    return 1;
  }

  // 打印文件内容
  std::cout << static_cast<const char *>(ptr) << std::endl;

  // 解除内存映射
  if (munmap(ptr, sb.st_size) == -1) {
    std::cerr << "Error unmapping file from memory" << std::endl;
    return 1;
  }

  // 关闭文件
  if (close(fd) == -1) {
    std::cerr << "Error closing file" << std::endl;
    return 1;
  }

  return 0;
}

这段代码打开名为test.txt的文件，使用fstat函数获取文件大小后，将文件映射到内存中。映射完成后，我们可以通过指针ptr访问和操作映射的文件，本示例将文件内容打印到终端上。最后，我们需要调用munmap函数来解除内存映射，同时关闭文件描述符。




#include <iostream>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    // 打开文件（不存在则创建，读写权限）
    int fd = open("test.txt", O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);
    if (fd == -1) {
        std::cerr << "Failed to open file.\n";
        return 1;
    }

    // 获取文件大小并扩展至1KB
    int file_size = lseek(fd, 0, SEEK_END);
    if (file_size == -1) {
        std::cerr << "Failed to determine file size.\n";
        close(fd);
        return 1;
    }
    if (file_size < 1024) {
        if (ftruncate(fd, 1024) == -1) {
            std::cerr << "Failed to truncate file.\n";
            close(fd);
            return 1;
        }
        file_size = 1024;
    }

    // 映射文件到内存
    char* data = (char*) mmap(nullptr, file_size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
    if (data == MAP_FAILED) {
        std::cerr << "Failed to map file to memory.\n";
        close(fd);
        return 1;
    }

    // 写入数据并同步到磁盘
    std::string message = "Hello, world!\n";
    memcpy(data, message.c_str(), message.size());
    msync(data, message.size(), MS_SYNC);

    // 解除映射并关闭文件
    munmap(data, file_size);
    close(fd);

    return 0;
}
该代码首先打开一个名为“test.txt”的文件，如果该文件不存在则创建它。然后，如果文件大小小于1KB，则将其扩展至1KB。接下来，使用mmap将文件映射到内存，并将数据写入映射的内存中。最后，通过调用msync将内存中的数据同步到磁盘上，并解除映射并关闭文件。

























#include <lzma.h>

using namespace std;

int main() { // 原始文件的路径和名称 string filename = "example.txt";

// 定义压缩文件的路径和名称
string compressedFilename = filename + ".lzma";

// 定义解压后的文件的路径和名称
string decompressedFilename = filename + ".unlzma";

// 初始化LZMA压缩器
lzma_stream stream = LZMA_STREAM_INIT;

// 压缩文件
ifstream inFile(filename, ios::binary);
ofstream compressedFile(compressedFilename, ios::binary);
uint8_t in[BUFSIZ];
uint8_t out[BUFSIZ];
stream.avail_in = inFile.readsome((char*)in, sizeof(in));
stream.next_in = in;
stream.avail_out = sizeof(out);
stream.next_out = out;
lzma_ret ret = lzma_easy_encoder(&stream, LZMA_PRESET_DEFAULT, LZMA_CHECK_CRC64);
if (ret != LZMA_OK) {
    cerr << "Error initializing LZMA encoder: " << ret << endl;
    return 1;
}
while (stream.avail_in > 0) {
    ret = lzma_code(&stream, LZMA_RUN);
    if (ret != LZMA_OK) {
        cerr << "Error compressing file: " << ret << endl;
        return 1;
    }
    if (stream.avail_out == 0) {
        compressedFile.write((char*)out, sizeof(out));
        stream.avail_out = sizeof(out);
        stream.next_out = out;
    }
    stream.avail_in = inFile.readsome((char*)in, sizeof(in));
    stream.next_in = in;
}
while ((ret = lzma_code(&stream, LZMA_FINISH)) != LZMA_STREAM_END) {
    if (ret != LZMA_OK) {
        cerr << "Error finishing compression: " << ret << endl;
        return 1;
    }
    compressedFile.write((char*)out, (char*)stream.next_out - (char*)out);
    stream.avail_out = sizeof(out);
    stream.next_out = out;
}
compressedFile.write((char*)out, (char*)stream.next_out - (char*)out);
compressedFile.close();
inFile.close();

// 解压文件
ifstream compressedInputFile(compressedFilename, ios::binary);
ofstream decompressedFile(decompressedFilename, ios::binary);
stream = LZMA_STREAM_INIT;
stream.next_in = in;
stream.next_out = out;
while (true) {
    stream.avail_in = compressedInputFile.readsome((char*)in, sizeof(in));
    if (stream.avail_in == 0) {
        break;
    }
    ret = lzma_stream_decoder(&stream, UINT64_MAX, 0);
    if (ret != LZMA_OK) {
        cerr << "Error initializing LZMA decoder: " << ret << endl;
        return 1;
    }
    stream.avail_out = sizeof(out);
    ret = lzma_code(&stream, LZMA_RUN);
    if (ret != LZMA_OK && ret != LZMA_STREAM_END) {
        cerr << "Error decompressing file: " << ret << endl;
        return 1;
    }
    decompressedFile.write((char*)out, (char*)stream.next_out - (char*)out);
}
lzma_end(&stream);
compressedInputFile










好的，以下是一个简单的C++程序，可以使用LZMA算法将文件压缩成7z格式。在运行程序之前，请确保您已经安装了7-Zip文件归档程序。代码注释中有更多详细的信息。

#include <iostream>
#include <fstream>
#include <cstring>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

// 引入7z头文件
#include <7zip/Archive/7z/7zHandler.h>
#include <7zip/Common/FileStreams.h>
#include <7zip/MyVersion.h>
#include <7zip/IStream.h>
#include <7zip/IPassword.h>
#include <7zip/Archive/IArchive.h>
#include <7zip/Archive/IArchiveCommandLine.h>
#include <7zip/UI/UserInputUtils.h>

// 压缩文件的函数
void CompressFile(const std::string& inFilepath, const std::string& outFilepath)
{
    // 加载7z库
    if (CreateObject == NULL)
    {
        fprintf(stderr, "\n7z.dll or 7z.so is not found. Exit");
        exit(EXIT_FAILURE);
    }

    // 打开输入文件流
    std::ifstream inputFile(inFilepath, std::ios::binary);
    if(!inputFile.is_open())
    {
        fprintf(stderr, "Could not open input file: %s\n", inFilepath.c_str());
        exit(EXIT_FAILURE);
    }

    // 打开输出文件流
    std::ofstream outputFile(outFilepath, std::ios::binary);
    if(!outputFile.is_open())
    {
        fprintf(stderr, "Could not open output file: %s\n", outFilepath.c_str());
        exit(EXIT_FAILURE);
    }

    // 创建一个归档文件系统对象
    CMyComPtr<IInStream> inStream(new CInFileStream(inFilepath.c_str()));
    CMyComPtr<IOutStream> outStream(new COutFileStream(outFilepath.c_str()));
    CMyComPtr<IArchive> archive(new NArchive::N7z::CHandler);
    archive->Create(outStream);
    UInt64 fileSize;
    CInFile inputFile_7zip;
    inputFile_7zip.Open(inFilepath.c_str());
    fileSize = inputFile_7zip.GetLength();
    stdin = freopen(NULL, "rbS", stdin);
    UserInputUtils::SetStream(&std::cin);
    UserInputUtils::SetStream(&std::cerr);
    UserInputUtils::SetStream(&std::cout);

    // 创建压缩器对象
    if (archive->UpdateItems(inStream, 1, NULL, &fileSize))
    {
        fprintf(stderr, "Error compressing file: %s\n", inFilepath.c_str());
        exit(EXIT_FAILURE);
    }

    // 关闭文件流
    inputFile.close();
    outputFile.close();
}

int main(int argc, char *argv[])
{
    if(argc != 3)
    {
        fprintf(stderr, "Usage: %s <input_file> <output_file.7z>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    std::string input_file(argv[1]);
    std::string output_file(argv[2]);

    CompressFile(input_file, output_file);

    std::cout << "File compressed successfully to " << output_file << std::endl;

    return 0;
}
在使用此程序之前，请确保安装了7-Zip文件归档程序，并且请将7-Zip目录添加到您的系统路径中。






你可以使用标准C++库中的string和find_last_of函数来查找文件中某个字符最后一次出现的位置。以下是一个示例代码：

#include <iostream>
#include <fstream>
#include <string>

int main() {
    std::ifstream inputFile("filename.txt");
    if (!inputFile.is_open()) {
        std::cout << "File not found!\n";
        return 1;
    }

    std::string contents((std::istreambuf_iterator<char>(inputFile)), std::istreambuf_iterator<char>());
    char searchChar = 'a';
    std::size_t lastPosition = contents.find_last_of(searchChar);
    if (lastPosition != std::string::npos) {
        std::cout << "Last position of " << searchChar << " found at: " << lastPosition << std::endl;
    } else {
        std::cout << searchChar << " not found!\n";
    }

    inputFile.close();
    return 0;
}
该程序从名为filename.txt的文件中读取内容，查找最后一次出现的字符。如果文件不存在，则会显示错误消息。

































初始化文件夹
创建log文件
mmap
写入log
压缩文件
查看是否超过最大存储上限


查看是否超过最大存储上限:
计算当前目录大小
判断是否超过最大上线



创建log文件:
存在log文件 & 如果存在就查看是否存满
Y: 使用当文件继续存储
N: 创建新log文件
mmap


压缩文件:
将文件压缩
文件名根据时间戳，序号生成
删除原文件
-> 查看是否超过最大存储上限
   Y: 删除一半最早压缩文件，重整序号


保存log:
将log格式化(增加时间戳 进程ID)后保存进队列中


写入log:
判断文件是否写满，如果写满
Y: -> 压缩文件
   -> 创建log文件
子线程从队列中循环取出log并写入mmap内存



子线程:
1. 初始化文件夹
2. 创建log文件
3. 写入log


待完善:
1. 将log格式化(增加时间戳 进程ID)
2. 压缩前，将\0替换成空格，防止文件被识别成二进制文件







好的，以下是一个基于 C++11 标准的简单示例代码，其中使用了 std::queue 作为线程操作的共享数据：

#include <iostream>
#include <string>
#include <queue>
#include <thread>
#include <mutex>
#include <condition_variable>

std::queue<std::string> str_queue;
std::mutex mtx;
std::condition_variable cv;

void push_string() {
    for (int i = 0; i < 10; ++i) {
        std::string str = "String #" + std::to_string(i);
        std::unique_lock<std::mutex> lock(mtx);
        str_queue.push(str);
        std::cout << "Pushed: " << str << std::endl;
        lock.unlock();
        cv.notify_one();  // 通知另一个线程可以取出数据了
        std::this_thread::sleep_for(std::chrono::milliseconds(500));  // 暂停 500ms
    }
}

void pop_string() {
    while (true) {
        std::unique_lock<std::mutex> lock(mtx);
        cv.wait(lock, []{ return !str_queue.empty(); });  // 阻塞等待队列有数据
        std::string str = str_queue.front();
        str_queue.pop();
        std::cout << "Popped: " << str << std::endl;
        lock.unlock();
        std::this_thread::sleep_for(std::chrono::milliseconds(1000));  // 暂停 1s
    }
}

int main() {
    std::thread t1(push_string);
    std::thread t2(pop_string);

    t1.join();
    t2.detach();  // detach() 表示让该线程运行到结束，不需要 join()

    return 0;
}

在上面的代码中，我们定义了一个 std::queue 类型的队列 str_queue，并定义了两个线程函数 push_string() 和 pop_string()。其中，push_string() 函数循环生成 10 个字符串并保存到队列中，并在每次保存后打印一条信息，然后暂停 500ms，以模拟这个线程的执行时间。

pop_string() 函数则是一直循环等待有数据可以从队列中取出，如果队列为空则会等待，只有当阻塞条件被满足时才会被唤醒。每次取出队列中的一个字符串后，将其打印到终端，并暂停 1s，以模拟这个线程的执行时间。

在 main() 函数中，我们使用两个线程并发地执行 push_string() 和 pop_string() 函数，并将它们加入到线程中。最后，我们使用 join() 和 detach() 函数将两个线程与主线程连接起来，以确保它们的顺序问题能够得到正确解决。

以上就是一个简单的 C++ 示例，希望能帮助你理解线程和队列的基本使用方式。



auto updateX = [](View* view) {
		int pdcOffset = DLS_CAMERA_WIDTH - DLS_TIPS_IMAGE_WIDTH;
		view->setX(pdcOffset + view->getX());
	};


以下是C++实现的代码，使用了STL的sort函数和string的substr函数：

#include <iostream>
#include <algorithm>
#include <string>
#include <vector>

bool compare_string(const std::string& a, const std::string& b) {
    std::string tail_a = a.substr(a.length() - 8);
    std::string tail_b = b.substr(b.length() - 8);
    return tail_a < tail_b;
}

int main() {
    std::vector<std::string> str_vec = {"hello123", "world456", "apple789", "banana321"};
    std::sort(str_vec.begin(), str_vec.end(), compare_string);
    for (auto& str : str_vec) {
        std::cout << str << " ";
    }
    std::cout << std::endl;
    return 0;
}
在这个例子中，我们创建了一个字符串的向量(str_vec)，并定义了函数compare_string，该函数用于比较字符串中尾部8个字符大小。sort函数调用了该函数来对向量进行排序。最后，我们遍历向量并输出结果。





下面是C++代码示例，生成长度为100的随机字符串：

#include <iostream>
#include <string>
#include <random>

int main() {
    const int len = 100;
    const std::string alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    std::string str(len, 0); //初始化字符串
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(0, alphabet.size() - 1);
    // 生成随机字符串
    for (int i = 0; i < len; i++) {
        str[i] = alphabet[dis(gen)];
    }
    std::cout << str << std::endl; // 输出随机生成的字符串
    return 0;
}
该代码使用了C++11中的随机数生成库，生成了一个长度为100的随机字符串，并输出到标准输出设备上。



你可以使用C++中的可变参数模板来定义此函数。一个示例实现如下：

#include <stdarg.h>
#include <stdio.h>

void combine_strings(const char* format, ...) {
    va_list args;
    va_start(args, format);
    char buffer[1000];
    vsnprintf(buffer, sizeof(buffer), format, args);
    va_end(args);
    printf("%s\n", buffer);
}

int main() {
    combine_strings("The %s jumps over the %s\n", "quick brown fox", "lazy dog");
    return 0;
}
在这个示例中，combine_strings函数的第一个参数是一个C格式字符串，它描述了如何将其后面的参数组合在一起。...表示可变参数列表，它可以接受任意数量和类型的参数。

va_list是一个指向可变参数列表的指针，va_start和va_end是用来初始化和清理可变参数列表的宏。vsnprintf函数可以将可变参数列表按照指定的格式组合成一个字符串并存储在buffer变量中。

在这个示例中，函数将两个字符串合并成一个输出。你可以根据需要修改函数的参数和实现来满足你的需求。






可以使用以下代码在 Android 平台的 C++ 中打印当前线程 ID：

#include <unistd.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <pthread.h>
#include <stdio.h>

void print_thread_id() {
    pid_t pid;
    pid_t tid;

    pid = getpid();
    tid = syscall(SYS_gettid);

    printf("PID: %d, TID: %d\n", pid, tid);
}
在需要打印线程 ID 的地方调用 print_thread_id() 即可。



